# from flask_openapi3 import OpenAPI, Info, Tag
# from sqlalchemy.orm import relationship
# from flask import Flask, request, jsonify, redirect, abort
# from urllib.parse import unquote
# import sqlite3
# from fastapi import HTTPException
# from fastapi import Path
# from fastapi.responses import JSONResponse
# from sqlalchemy.exc import IntegrityError

# from model import Session, Product, Provider
# from logger import logger
# from schemas import *
# from flask_cors import CORS, cross_origin

# info = Info(title="Minha API", version="1.0.0")
# app = OpenAPI(__name__, info=info)
# cors = CORS(app)

# app.config["CORS_HEADERS"] = "Content-Type"

# db_name = "db.sqlite3"

# # Definindo tags
# home_tag = Tag(
#     name="Documentação",
#     description="Seleção de documentação: Swagger, Redoc ou RapiDoc",
# )
# produto_tag = Tag(
#     name="Produto", description="Visualização, adição, edição e remoção de produtos à base"
# )
# fornecedor_tag = Tag(
#     name="Fornecedor", description="Visualização e adição de fornecedores a base"
# )
# comentario_tag = Tag(
#     name="Comentario",
#     description="Adição de um comentário à um produtos cadastrado na base",
# )

# @app.get("/", tags=[home_tag])
# @cross_origin()
# def home():
#     """Redireciona para /openapi, tela que permite a escolha do estilo de documentação."""
#     return redirect("/openapi")

# @app.get(
#     "/products",
#     tags=[produto_tag],
#     responses={"200": ListagemProductsSchema, "404": ErrorSchema},
# )
# @cross_origin()
# def get_products():
#     """Faz a busca por todos os Produtos cadastrados

#     Retorna uma representação da listagem de produtos.
#     """
#     session = Session()
#     products = session.query(Product).all()
#     products_json = [apresenta_product(product) for product in products]
#     return products_json

# @app.get(
#     "/product/",
#     tags=[produto_tag],
#     responses={"200": ProductViewSchema, "404": ErrorSchema},
# )
# @cross_origin()
# def get_product(query: ProductBuscaSchema):
#     """Faz a busca por um Produto a partir do id do produto

#     Retorna uma representação dos produtos e comentários associados.
#     """
#     product_id = query.id
#     logger.debug(f"Coletando dados sobre product #{product_id}")
#     session = Session()
#     product = session.query(Product).filter(Product.id == product_id).first()
#     if not product:
#         error_msg = "product não encontrado na base :/"
#         logger.warning(f"Erro ao buscar product '{product_id}', {error_msg}")
#         return {"message": error_msg}, 404
#     else:
#         logger.debug(f"product encontrado: '{product.nome}'")
#         return apresenta_product(product), 200

# @app.post(
#     "/product/",
#     tags=[produto_tag],
#     responses={"200": ProductViewSchema, "409": ErrorSchema, "400": ErrorSchema},
# )
# @cross_origin()
# def add_product( form: ProductSchema):
#     """Adiciona um novo Produto à base de dados associado a um fornecedor

#     Retorna uma representação dos produtos e comentários associados.
#     """
#     session = Session()
#     try:
#         provider = session.query(Provider).filter(Provider.id == provider_id).first()
#         if not provider:
#             return {"message": "Fornecedor não encontrado"}, 404
#         product = Product(
#             nome=form.nome,
#             recipiente=form.recipiente,
#             quantidade=form.quantidade,
#             valor=form.valor,
#             provider=provider,
#         )
#         session.add(product)
#         session.commit()
#         return apresenta_product(product), 200
#     except IntegrityError:
#         session.rollback()
#         return {"message": "Erro ao adicionar produto. Nome e recipiente duplicados."}, 409
#     except Exception as e:
#         session.rollback()
#         return {"message": f"Erro interno ao processar a requisição: {str(e)}"}, 400

# @app.post(
#     "/product",
#     tags=[produto_tag],
#     responses={"200": ProductViewSchema, "409": ErrorSchema, "400": ErrorSchema},
# )
# @cross_origin()
# def add_product(form: ProductSchema):
#     """Adiciona um novo Produto à base de dados

#     Retorna uma representação dos produtos e comentários associados.
#     """
#     product = Product(
#         nome=form.nome,
#         recipiente=form.recipiente,
#         quantidade=form.quantidade,
#         valor=form.valor,
#     )
#     logger.debug(f"Adicionando product de nome: '{product.nome}'")
#     try:
#         # criando conexão com a base
#         session = Session()

#         nome = form.nome
#         recipiente = form.recipiente

#         # Verificar se o produto já existe no banco de dados
#         existing_product = (
#             session.query(Product).filter_by(nome=nome, recipiente=recipiente).first()
#         )

#         if existing_product is not None:
#             raise RuntimeError

#         # adicionando produto
#         session.add(product)

#         # efetivando o comando de adição de novo item na tabela
#         session.commit()
#         logger.debug(f"Adicionado product de nome: '{product.nome}'")
#         return apresenta_product(product), 200

#     except RuntimeError as runtimeError:
#         # como a duplicidade do nome é a provável razão do IntegrityError
#         error_msg = "produto de mesmo nome e recipiente já salvo na base :/"
#         logger.warning(f"Erro ao adicionar product '{product.nome}', {error_msg}")
#         return {"message": error_msg}, 409

#     except Exception as error:
#         # caso um erro fora do previsto
#         error_msg = "Não foi possível salvar novo item :/"
#         logger.warning(f"Erro ao adicionar product '{product.nome}', {error_msg}")
#         return {"message": error_msg}, 400


# @app.put(
#     "/product/", tags=[produto_tag],
#     responses={"200": ProductViewSchema, "409": ErrorSchema, "400": ErrorSchema}
# )
# @cross_origin()
# def update_product(query: ProductBuscaSchema, form: ProductSchema):
#     """Faz a edição de Produtos já cadastrados"""
#     product_id = query.id
#     try:
#         session = Session()
#         existing_product = session.query(Product).filter(Product.id == product_id).first()
#         if not existing_product:
#             raise HTTPException(
#                 status_code=404, detail=f"Produto de id {product_id} não encontrado"
#             )
#         existing_product.nome = form.nome
#         existing_product.recipiente = form.recipiente
#         existing_product.quantidade = form.quantidade
#         existing_product.valor = form.valor
#         session.commit()
#         return apresenta_product(existing_product), 200
#     except HTTPException as e:
#         raise e
#     except Exception as e:
#         return {"message": f"Erro interno ao processar a requisição: {str(e)}"}, 500

# @app.delete("/product/",  tags=[produto_tag],
#     responses={"200": ProductViewSchema, "409": ErrorSchema, "400": ErrorSchema})
# @cross_origin()
# def del_product(query: ProductBuscaSchema):
#     """Deleta um Produto cadastrado 

#     Retorna uma mensagem de confirmação da remoção.
#     """
#     product_id = query.id
#     logger.debug(f"Coletando dados sobre product #{product_id}")
#     session = Session()
#     product = session.query(Product).filter(Product.id == product_id).first()
#     if product:
#         logger.debug(f"Deletando dados sobre product #{product_id}")
#         session.delete(product)
#         session.commit()
#         return {"message": "produto removido", "id": product_id}
#     else:
#         error_msg = "product não encontrado na base :/"
#         logger.warning(f"Erro ao deletar product #'{product}', {error_msg}")
#         return {"message": error_msg}, 404

# @app.post(
#     "/provider",
#     tags=[fornecedor_tag],
#     responses={"200": ProviderViewSchema, "409": ErrorSchema, "400": ErrorSchema},
# )
# @cross_origin()
# def add_provider(form: ProviderSchema):
#     """Adiciona um novo Fornecedor à base de dados

#     Retorna uma representação dos produtos e comentários associados.
#     """
#     provider = Provider(
#         nome=form.nome,
#         cnpj=form.cnpj,
#         cep=form.cep,
#         cidade=form.cidade,
#         uf=form.uf,
#     )
#     logger.debug(f"Adicionando provider de nome: '{provider.nome}'")
#     session = Session()
#     try:
#         session.add(provider)
#         session.commit()
#         return apresenta_provider(provider), 200
#     except IntegrityError:
#         session.rollback()
#         return {"message": "CNPJ já está cadastrado na base :/"}, 409
#     except Exception as e:
#         session.rollback()
#         return {"message": f"Não foi possível salvar novo fornecedor :/{str(e)}"}, 400

# @app.get(
#     "/providers",
#     tags=[fornecedor_tag],
#     responses={"200": ListagemProvidersSchema, "404": ErrorSchema},
# )
# @cross_origin()
# def get_providers():
#     """Faz a busca por todos os Fornecedores cadastrados

#     Retorna uma representação da listagem de produtos.
#     """
#     session = Session()
#     providers = session.query(Provider).all()
#     providers_json = [apresenta_provider(provider) for provider in providers]
#     return providers_json

# if __name__ == "__main__":
#     app.run(debug=True, host='0.0.0.0', port=8080)
